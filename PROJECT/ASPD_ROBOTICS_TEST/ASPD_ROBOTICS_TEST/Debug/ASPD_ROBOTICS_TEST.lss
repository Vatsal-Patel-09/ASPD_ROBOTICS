
ASPD_ROBOTICS_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  000007fc  00000890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800238  00800238  000008c8  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00001038  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001086  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000335  00000000  00000000  0000219e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082c  00000000  00000000  000024d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000288  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c9  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ef       	ldi	r30, 0xFC	; 252
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 34       	cpi	r26, 0x44	; 68
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 1b 01 	call	0x236	; 0x236 <main>
 122:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_on>:

#include "lcd.h"


void buzzer_on(void){
	PORTC |= 0x08;
 12a:	43 9a       	sbi	0x08, 3	; 8
}
 12c:	08 95       	ret

0000012e <buzzer_off>:

void buzzer_off(void){
	PORTC &= 0x00;
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	18 b8       	out	0x08, r1	; 8
}
 132:	08 95       	ret

00000134 <buzzer_pin_config>:

void buzzer_pin_config() {
	DDRC |= 0x00;
 134:	87 b1       	in	r24, 0x07	; 7
 136:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x00;
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	88 b9       	out	0x08, r24	; 8
}
 13c:	08 95       	ret

0000013e <motion_pin_config>:
void motion_pin_config() {
	DDRA |= 0x0F;
 13e:	81 b1       	in	r24, 0x01	; 1
 140:	8f 60       	ori	r24, 0x0F	; 15
 142:	81 b9       	out	0x01, r24	; 1
	PORTA |= 0x00;
 144:	82 b1       	in	r24, 0x02	; 2
 146:	82 b9       	out	0x02, r24	; 2
	DDRL |= 0x18;
 148:	ea e0       	ldi	r30, 0x0A	; 10
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	80 81       	ld	r24, Z
 14e:	88 61       	ori	r24, 0x18	; 24
 150:	80 83       	st	Z, r24
	PORTL |= 0x18;
 152:	eb e0       	ldi	r30, 0x0B	; 11
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	80 81       	ld	r24, Z
 158:	88 61       	ori	r24, 0x18	; 24
 15a:	80 83       	st	Z, r24
}
 15c:	08 95       	ret

0000015e <timer5_init>:

void timer5_init() {
	TCCR5A |= 0xA9;
 15e:	e0 e2       	ldi	r30, 0x20	; 32
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	80 81       	ld	r24, Z
 164:	89 6a       	ori	r24, 0xA9	; 169
 166:	80 83       	st	Z, r24
	TCCR5B |= 0x0B;
 168:	e1 e2       	ldi	r30, 0x21	; 33
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	80 81       	ld	r24, Z
 16e:	8b 60       	ori	r24, 0x0B	; 11
 170:	80 83       	st	Z, r24
	TCNT5H |= 0xFF;
 172:	e5 e2       	ldi	r30, 0x25	; 37
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	80 81       	ld	r24, Z
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	80 83       	st	Z, r24
	TCNT5L |= 0x00;
 17c:	e4 e2       	ldi	r30, 0x24	; 36
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	80 83       	st	Z, r24
	OCR5AH |= 0x00;
 184:	e9 e2       	ldi	r30, 0x29	; 41
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	80 81       	ld	r24, Z
 18a:	80 83       	st	Z, r24
	OCR5BH |= 0x00;
 18c:	eb e2       	ldi	r30, 0x2B	; 43
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	80 81       	ld	r24, Z
 192:	80 83       	st	Z, r24
}
 194:	08 95       	ret

00000196 <velocity>:

void velocity(unsigned char left_motor, unsigned char right_motor) {
	OCR5AL = (unsigned char)left_motor;
 196:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 19a:	60 93 2a 01 	sts	0x012A, r22
}
 19e:	08 95       	ret

000001a0 <forward>:


void forward() {
	PORTA = 0x06;
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	82 b9       	out	0x02, r24	; 2
}
 1a4:	08 95       	ret

000001a6 <hard_left>:

void hard_left() {
	PORTA = 0x05;
 1a6:	85 e0       	ldi	r24, 0x05	; 5
 1a8:	82 b9       	out	0x02, r24	; 2
}
 1aa:	08 95       	ret

000001ac <soft_left>:

void soft_left() {
	PORTA = 0x04;
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	82 b9       	out	0x02, r24	; 2
}
 1b0:	08 95       	ret

000001b2 <back>:

void back() {
	PORTA = 0x09;
 1b2:	89 e0       	ldi	r24, 0x09	; 9
 1b4:	82 b9       	out	0x02, r24	; 2
}
 1b6:	08 95       	ret

000001b8 <stop>:

void stop() {
	PORTA &= 0x00;
 1b8:	82 b1       	in	r24, 0x02	; 2
 1ba:	12 b8       	out	0x02, r1	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	9f e7       	ldi	r25, 0x7F	; 127
 1c0:	a6 e1       	ldi	r26, 0x16	; 22
 1c2:	81 50       	subi	r24, 0x01	; 1
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	a0 40       	sbci	r26, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <stop+0xa>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <stop+0x14>
 1cc:	00 00       	nop
	_delay_ms(500);
}
 1ce:	08 95       	ret

000001d0 <init>:


void init(void) {
	motion_pin_config();
 1d0:	0e 94 9f 00 	call	0x13e	; 0x13e <motion_pin_config>
	timer5_init();
 1d4:	0e 94 af 00 	call	0x15e	; 0x15e <timer5_init>
	buzzer_pin_config();
 1d8:	0e 94 9a 00 	call	0x134	; 0x134 <buzzer_pin_config>
	// forward();
	lcd_port_config();
 1dc:	0e 94 23 02 	call	0x446	; 0x446 <lcd_port_config>
	lcd_init();
 1e0:	0e 94 92 02 	call	0x524	; 0x524 <lcd_init>
}
 1e4:	08 95       	ret

000001e6 <buzzer_start_stop>:


void buzzer_start_stop() {
	buzzer_on();
 1e6:	0e 94 95 00 	call	0x12a	; 0x12a <buzzer_on>
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	9f ef       	ldi	r25, 0xFF	; 255
 1ee:	ac e2       	ldi	r26, 0x2C	; 44
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	a0 40       	sbci	r26, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <buzzer_start_stop+0xa>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <buzzer_start_stop+0x14>
 1fa:	00 00       	nop
	_delay_ms(1000);
	buzzer_off();
 1fc:	0e 94 97 00 	call	0x12e	; 0x12e <buzzer_off>
}
 200:	08 95       	ret

00000202 <fast_lcd>:

void fast_lcd() {
	lcd_string(1 , 5, "Fast");
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	65 e0       	ldi	r22, 0x05	; 5
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	52 e0       	ldi	r21, 0x02	; 2
 20a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
	lcd_string(2, 4, "Forward");
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	64 e0       	ldi	r22, 0x04	; 4
 212:	45 e0       	ldi	r20, 0x05	; 5
 214:	52 e0       	ldi	r21, 0x02	; 2
 216:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
}
 21a:	08 95       	ret

0000021c <slow_lcd>:

void slow_lcd() {
	lcd_string(1 , 5, "slow");
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	4d e0       	ldi	r20, 0x0D	; 13
 222:	52 e0       	ldi	r21, 0x02	; 2
 224:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
	lcd_string(2, 4, "Forward");
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	64 e0       	ldi	r22, 0x04	; 4
 22c:	45 e0       	ldi	r20, 0x05	; 5
 22e:	52 e0       	ldi	r21, 0x02	; 2
 230:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
}
 234:	08 95       	ret

00000236 <main>:

int main(void)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
	
	init();
 23a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <init>
	// 	_delay_ms(5000);
	// 	lcd_clear();
	// 	lcd_numeric_value(2, 6, 458, 4);
	
	// 1. forward fast
	fast_lcd();
 23e:	0e 94 01 01 	call	0x202	; 0x202 <fast_lcd>
	forward();
 242:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	velocity(255 ,255);
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	6f ef       	ldi	r22, 0xFF	; 255
 24a:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	a0 ee       	ldi	r26, 0xE0	; 224
 254:	81 50       	subi	r24, 0x01	; 1
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	a0 40       	sbci	r26, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x28>
 25e:	00 00       	nop
	_delay_ms(5000);
	lcd_clear();
 260:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	buzzer_start_stop();
 264:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <buzzer_start_stop>
	
	// 2. pause revers
	stop();
 268:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <stop>
	forward();
 26c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	lcd_string(1 , 1, "revers");
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	42 e1       	ldi	r20, 0x12	; 18
 276:	52 e0       	ldi	r21, 0x02	; 2
 278:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
	velocity(255, 0);
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	9f e7       	ldi	r25, 0x7F	; 127
 288:	af e1       	ldi	r26, 0x1F	; 31
 28a:	81 50       	subi	r24, 0x01	; 1
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	a0 40       	sbci	r26, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x54>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x5e>
 294:	00 00       	nop
	_delay_ms(700);
	back();
 296:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <back>
	velocity(255, 255);
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	6f ef       	ldi	r22, 0xFF	; 255
 29e:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	93 e1       	ldi	r25, 0x13	; 19
 2a6:	af e9       	ldi	r26, 0x9F	; 159
 2a8:	81 50       	subi	r24, 0x01	; 1
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	a0 40       	sbci	r26, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x72>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x7c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x7e>
	_delay_ms(3535);
	lcd_clear();
 2b4:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	
	
	
	// 3. park change diraction
	forward();
 2b8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	velocity(0, 255);
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	6f ef       	ldi	r22, 0xFF	; 255
 2c0:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	9f e7       	ldi	r25, 0x7F	; 127
 2c8:	a6 e1       	ldi	r26, 0x16	; 22
 2ca:	81 50       	subi	r24, 0x01	; 1
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	a0 40       	sbci	r26, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x94>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x9e>
 2d4:	00 00       	nop
	_delay_ms(500);
	stop();
 2d6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <stop>
	for (int i = 0; i < 3; i++)
	{
		buzzer_start_stop();
 2da:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <buzzer_start_stop>
 2de:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <buzzer_start_stop>
 2e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <buzzer_start_stop>
	}
	forward();
 2e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	velocity(255, 255);
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	6f ef       	ldi	r22, 0xFF	; 255
 2ee:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	9f e7       	ldi	r25, 0x7F	; 127
 2f6:	a0 e7       	ldi	r26, 0x70	; 112
 2f8:	81 50       	subi	r24, 0x01	; 1
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	a0 40       	sbci	r26, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0xc2>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0xcc>
 302:	00 00       	nop
	_delay_ms(2500);
	stop();
 304:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <stop>
	
	
	// 4. hard left then slow
	buzzer_start_stop();
 308:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <buzzer_start_stop>
	forward();
 30c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	hard_left();
 310:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <hard_left>
	lcd_string(1, 2, "Hard left");
 314:	c9 e1       	ldi	r28, 0x19	; 25
 316:	d2 e0       	ldi	r29, 0x02	; 2
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	ae 01       	movw	r20, r28
 31e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
	velocity(100, 100);
 322:	84 e6       	ldi	r24, 0x64	; 100
 324:	64 e6       	ldi	r22, 0x64	; 100
 326:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	ac e2       	ldi	r26, 0x2C	; 44
 330:	81 50       	subi	r24, 0x01	; 1
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	a0 40       	sbci	r26, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0xfa>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x104>
 33a:	00 00       	nop
	_delay_ms(1000);
	lcd_clear();
 33c:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	
	
	forward();
 340:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	slow_lcd();
 344:	0e 94 0e 01 	call	0x21c	; 0x21c <slow_lcd>
	velocity(100, 100);
 348:	84 e6       	ldi	r24, 0x64	; 100
 34a:	64 e6       	ldi	r22, 0x64	; 100
 34c:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	9f e7       	ldi	r25, 0x7F	; 127
 354:	a1 e5       	ldi	r26, 0x51	; 81
 356:	b1 e0       	ldi	r27, 0x01	; 1
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	a0 40       	sbci	r26, 0x00	; 0
 35e:	b0 40       	sbci	r27, 0x00	; 0
 360:	d9 f7       	brne	.-10     	; 0x358 <main+0x122>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x12e>
 364:	00 00       	nop
	_delay_ms(9000);
	lcd_clear();
 366:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	stop();
 36a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <stop>
	
	// 5. soft left then fast
	
	forward();
 36e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	lcd_string(1,2 , "soft left");
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	43 e2       	ldi	r20, 0x23	; 35
 378:	52 e0       	ldi	r21, 0x02	; 2
 37a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
	soft_left();
 37e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <soft_left>
	velocity(0, 255);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	6f ef       	ldi	r22, 0xFF	; 255
 386:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	9f ef       	ldi	r25, 0xFF	; 255
 38e:	ae e3       	ldi	r26, 0x3E	; 62
 390:	81 50       	subi	r24, 0x01	; 1
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	a0 40       	sbci	r26, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x15a>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x164>
 39a:	00 00       	nop
	_delay_ms(1400);
	stop();
 39c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <stop>
	lcd_clear();
 3a0:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	fast_lcd();
 3a4:	0e 94 01 01 	call	0x202	; 0x202 <fast_lcd>
	forward();
 3a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	velocity(255, 255);
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	6f ef       	ldi	r22, 0xFF	; 255
 3b0:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	9f ef       	ldi	r25, 0xFF	; 255
 3b8:	a0 ee       	ldi	r26, 0xE0	; 224
 3ba:	81 50       	subi	r24, 0x01	; 1
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	a0 40       	sbci	r26, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x184>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x18e>
 3c4:	00 00       	nop
	_delay_ms(5000);
	lcd_clear();
 3c6:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	stop();
 3ca:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <stop>
	
	
	
	// 6. left then slow and end stop
	buzzer_start_stop();
 3ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <buzzer_start_stop>
	forward();
 3d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	hard_left();
 3d6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <hard_left>
	lcd_string(1, 2, "Hard left");
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	ae 01       	movw	r20, r28
 3e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
	velocity(100, 100);
 3e4:	84 e6       	ldi	r24, 0x64	; 100
 3e6:	64 e6       	ldi	r22, 0x64	; 100
 3e8:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	9f e7       	ldi	r25, 0x7F	; 127
 3f0:	a3 e4       	ldi	r26, 0x43	; 67
 3f2:	81 50       	subi	r24, 0x01	; 1
 3f4:	90 40       	sbci	r25, 0x00	; 0
 3f6:	a0 40       	sbci	r26, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <main+0x1bc>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0x1c6>
 3fc:	00 00       	nop
	_delay_ms(1500);
	lcd_clear();
 3fe:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	forward();
 402:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <forward>
	slow_lcd();
 406:	0e 94 0e 01 	call	0x21c	; 0x21c <slow_lcd>
	velocity(100, 100);
 40a:	84 e6       	ldi	r24, 0x64	; 100
 40c:	64 e6       	ldi	r22, 0x64	; 100
 40e:	0e 94 cb 00 	call	0x196	; 0x196 <velocity>
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	9f e3       	ldi	r25, 0x3F	; 63
 416:	a0 e9       	ldi	r26, 0x90	; 144
 418:	b2 e0       	ldi	r27, 0x02	; 2
 41a:	81 50       	subi	r24, 0x01	; 1
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	a0 40       	sbci	r26, 0x00	; 0
 420:	b0 40       	sbci	r27, 0x00	; 0
 422:	d9 f7       	brne	.-10     	; 0x41a <main+0x1e4>
 424:	00 c0       	rjmp	.+0      	; 0x426 <main+0x1f0>
 426:	00 00       	nop
	_delay_ms(17500);
	lcd_clear();
 428:	0e 94 cd 02 	call	0x59a	; 0x59a <lcd_clear>
	stop();
 42c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <stop>
	
	lcd_string(1, 2, "bye....");
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	4d e2       	ldi	r20, 0x2D	; 45
 436:	52 e0       	ldi	r21, 0x02	; 2
 438:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
	
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <lcd_port_config>:
 * Logic: This function configures the LCD port pins as output and sets them to 0 initially
 * Example Call: lcd_port_config();
 */
void lcd_port_config(void)
{
	DDRC = DDRC | 0xF7;		// all LCD pins direction set as output
 446:	87 b1       	in	r24, 0x07	; 7
 448:	87 6f       	ori	r24, 0xF7	; 247
 44a:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x08;	// all LCD pins set to logic 0 except PC.3 (Buzzer pin)
 44c:	88 b1       	in	r24, 0x08	; 8
 44e:	88 70       	andi	r24, 0x08	; 8
 450:	88 b9       	out	0x08, r24	; 8
}
 452:	08 95       	ret

00000454 <lcd_set_4bit>:
 454:	86 e6       	ldi	r24, 0x66	; 102
 456:	9e e0       	ldi	r25, 0x0E	; 14
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_set_4bit+0x4>
 45c:	00 00       	nop
 * Example Call: lcd_set_4bit();
 */
void lcd_set_4bit (void)
{
	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
 45e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
 460:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				// Sending 3
 462:	80 e3       	ldi	r24, 0x30	; 48
 464:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
 466:	42 9a       	sbi	0x08, 2	; 8
 468:	ef ef       	ldi	r30, 0xFF	; 255
 46a:	f7 e4       	ldi	r31, 0x47	; 71
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <lcd_set_4bit+0x18>
 470:	00 c0       	rjmp	.+0      	; 0x472 <lcd_set_4bit+0x1e>
 472:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
 474:	42 98       	cbi	0x08, 2	; 8
 476:	e6 e6       	ldi	r30, 0x66	; 102
 478:	fe e0       	ldi	r31, 0x0E	; 14
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_set_4bit+0x26>
 47e:	00 00       	nop

	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
 480:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
 482:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				// Sending 3
 484:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
 486:	42 9a       	sbi	0x08, 2	; 8
 488:	ef ef       	ldi	r30, 0xFF	; 255
 48a:	f7 e4       	ldi	r31, 0x47	; 71
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_set_4bit+0x38>
 490:	00 c0       	rjmp	.+0      	; 0x492 <lcd_set_4bit+0x3e>
 492:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
 494:	42 98       	cbi	0x08, 2	; 8
 496:	e6 e6       	ldi	r30, 0x66	; 102
 498:	fe e0       	ldi	r31, 0x0E	; 14
 49a:	31 97       	sbiw	r30, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <lcd_set_4bit+0x46>
 49e:	00 00       	nop

	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
 4a0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
 4a2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				// Sending 3
 4a4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
 4a6:	42 9a       	sbi	0x08, 2	; 8
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	97 e4       	ldi	r25, 0x47	; 71
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <lcd_set_4bit+0x58>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <lcd_set_4bit+0x5e>
 4b2:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
 4b4:	42 98       	cbi	0x08, 2	; 8
 4b6:	e6 e6       	ldi	r30, 0x66	; 102
 4b8:	fe e0       	ldi	r31, 0x0E	; 14
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <lcd_set_4bit+0x66>
 4be:	00 00       	nop

	_delay_ms(1);
	cbit(lcd_port,RS);				// RS=0 --- Command Input
 4c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				// RW=0 --- Writing to LCD
 4c2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				// Sending 2 to initialize LCD in 4-bit mode
 4c4:	80 e2       	ldi	r24, 0x20	; 32
 4c6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				// Set Enable Pin
 4c8:	42 9a       	sbi	0x08, 2	; 8
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	97 e4       	ldi	r25, 0x47	; 71
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <lcd_set_4bit+0x7a>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <lcd_set_4bit+0x80>
 4d4:	00 00       	nop
	_delay_ms(5);					// Delay
	cbit(lcd_port,EN);				// Clear Enable Pin
 4d6:	42 98       	cbi	0x08, 2	; 8
}
 4d8:	08 95       	ret

000004da <lcd_wr_command>:
void lcd_wr_command (unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 4da:	98 b1       	in	r25, 0x08	; 8
 4dc:	9f 70       	andi	r25, 0x0F	; 15
 4de:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 4e0:	98 b1       	in	r25, 0x08	; 8
 */
void lcd_wr_command (unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 4e2:	28 2f       	mov	r18, r24
 4e4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 4e6:	92 2b       	or	r25, r18
 4e8:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 4ea:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 4ec:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 4ee:	42 9a       	sbi	0x08, 2	; 8
 4f0:	ef ef       	ldi	r30, 0xFF	; 255
 4f2:	f7 e4       	ldi	r31, 0x47	; 71
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <lcd_wr_command+0x1a>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <lcd_wr_command+0x20>
 4fa:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 4fc:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 4fe:	98 b1       	in	r25, 0x08	; 8
 500:	9f 70       	andi	r25, 0x0F	; 15
 502:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 504:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 506:	82 95       	swap	r24
 508:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 50a:	89 2b       	or	r24, r25
 50c:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 50e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 510:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 512:	42 9a       	sbi	0x08, 2	; 8
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	97 e4       	ldi	r25, 0x47	; 71
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <lcd_wr_command+0x3e>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <lcd_wr_command+0x44>
 51e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 520:	42 98       	cbi	0x08, 2	; 8
}
 522:	08 95       	ret

00000524 <lcd_init>:
 * Logic: This function initializes the LCD
 * Example Call: lcd_init();
 */
void lcd_init (void)
{
	lcd_set_4bit();
 524:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_set_4bit>
 528:	86 e6       	ldi	r24, 0x66	; 102
 52a:	9e e0       	ldi	r25, 0x0E	; 14
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <lcd_init+0x8>
 530:	00 00       	nop
	_delay_ms(1);
	lcd_wr_command(0x28);		// LCD 4-bit mode and 2 lines
 532:	88 e2       	ldi	r24, 0x28	; 40
 534:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
	lcd_wr_command(0x01);       // Clear display screen
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
	lcd_wr_command(0x06);       // Entry mode
 53e:	86 e0       	ldi	r24, 0x06	; 6
 540:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
	lcd_wr_command(0x0E);       // Display On and Cursor On
 544:	8e e0       	ldi	r24, 0x0E	; 14
 546:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
	lcd_wr_command(0x80);       // LCD cursor set to Home position		
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
}
 550:	08 95       	ret

00000552 <lcd_home>:
 * Logic: Passes 0x80 command to LCD using lcd_wr_command
 * Example Call: lcd_home();
 */
void lcd_home (void)
{
	lcd_wr_command(0x80);		// LCD cursor set to Home position
 552:	80 e8       	ldi	r24, 0x80	; 128
 554:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
}
 558:	08 95       	ret

0000055a <lcd_cursor>:
 *
 * Example Call: lcd_cursor(2, 3);
 */
void lcd_cursor (char row, char column)
{
	switch (row)
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	79 f0       	breq	.+30     	; 0x57c <lcd_cursor+0x22>
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	18 f4       	brcc	.+6      	; 0x568 <lcd_cursor+0xe>
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	c9 f4       	brne	.+50     	; 0x598 <lcd_cursor+0x3e>
 566:	05 c0       	rjmp	.+10     	; 0x572 <lcd_cursor+0x18>
 568:	83 30       	cpi	r24, 0x03	; 3
 56a:	69 f0       	breq	.+26     	; 0x586 <lcd_cursor+0x2c>
 56c:	84 30       	cpi	r24, 0x04	; 4
 56e:	a1 f4       	brne	.+40     	; 0x598 <lcd_cursor+0x3e>
 570:	0f c0       	rjmp	.+30     	; 0x590 <lcd_cursor+0x36>
	{
		case 1: lcd_wr_command (0x80 + column - 1); break;
 572:	86 2f       	mov	r24, r22
 574:	81 58       	subi	r24, 0x81	; 129
 576:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
 57a:	08 95       	ret
		case 2: lcd_wr_command (0xC0 + column - 1); break;
 57c:	86 2f       	mov	r24, r22
 57e:	81 54       	subi	r24, 0x41	; 65
 580:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
 584:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 586:	86 2f       	mov	r24, r22
 588:	8d 56       	subi	r24, 0x6D	; 109
 58a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
 58e:	08 95       	ret
		case 4: lcd_wr_command (0xD4 + column - 1); break;
 590:	86 2f       	mov	r24, r22
 592:	8d 52       	subi	r24, 0x2D	; 45
 594:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
 598:	08 95       	ret

0000059a <lcd_clear>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_wr_command>
}
 5a0:	08 95       	ret

000005a2 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 5a2:	cf 93       	push	r28
 5a4:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 5a6:	0e 94 ad 02 	call	0x55a	; 0x55a <lcd_cursor>
	
	char temp;
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 5aa:	88 b1       	in	r24, 0x08	; 8
 5ac:	8f 70       	andi	r24, 0x0F	; 15
 5ae:	88 b9       	out	0x08, r24	; 8
	lcd_port |= temp;
 5b0:	88 b1       	in	r24, 0x08	; 8
{
	lcd_cursor (row, column);
	
	char temp;
	temp = alpha_num_char;
	temp = (temp & 0xF0);
 5b2:	9c 2f       	mov	r25, r28
 5b4:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 5b6:	89 2b       	or	r24, r25
 5b8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 5ba:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 5bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 5be:	42 9a       	sbi	0x08, 2	; 8
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	97 e4       	ldi	r25, 0x47	; 71
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <lcd_wr_char+0x22>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <lcd_wr_char+0x28>
 5ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 5cc:	42 98       	cbi	0x08, 2	; 8

	alpha_num_char = alpha_num_char & 0x0F;
	alpha_num_char = alpha_num_char << 4;
	lcd_port &= 0x0F;
 5ce:	88 b1       	in	r24, 0x08	; 8
 5d0:	8f 70       	andi	r24, 0x0F	; 15
 5d2:	88 b9       	out	0x08, r24	; 8
	lcd_port |= alpha_num_char;
 5d4:	88 b1       	in	r24, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	alpha_num_char = alpha_num_char & 0x0F;
	alpha_num_char = alpha_num_char << 4;
 5d6:	c2 95       	swap	r28
 5d8:	c0 7f       	andi	r28, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= alpha_num_char;
 5da:	c8 2b       	or	r28, r24
 5dc:	c8 b9       	out	0x08, r28	; 8
	sbit(lcd_port,RS);
 5de:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 5e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 5e2:	42 9a       	sbi	0x08, 2	; 8
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	97 e4       	ldi	r25, 0x47	; 71
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <lcd_wr_char+0x46>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <lcd_wr_char+0x4c>
 5ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 5f0:	42 98       	cbi	0x08, 2	; 8
}
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 5f6:	0f 93       	push	r16
 5f8:	1f 93       	push	r17
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	d8 2f       	mov	r29, r24
 600:	c6 2f       	mov	r28, r22
 602:	fa 01       	movw	r30, r20
	while(*str != '\0')
 604:	40 81       	ld	r20, Z
 606:	44 23       	and	r20, r20
 608:	69 f0       	breq	.+26     	; 0x624 <lcd_string+0x2e>
 *        *str => pointer of the char data type which points to the address of first character of the string
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
 60a:	8f 01       	movw	r16, r30
 60c:	0f 5f       	subi	r16, 0xFF	; 255
 60e:	1f 4f       	sbci	r17, 0xFF	; 255
{
	while(*str != '\0')
	{
		lcd_wr_char(row, column, *str);
 610:	8d 2f       	mov	r24, r29
 612:	6c 2f       	mov	r22, r28
 614:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_wr_char>
		str++;
		column+=1;
 618:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 61a:	f8 01       	movw	r30, r16
 61c:	41 91       	ld	r20, Z+
 61e:	8f 01       	movw	r16, r30
 620:	44 23       	and	r20, r20
 622:	b1 f7       	brne	.-20     	; 0x610 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	08 95       	ret

0000062e <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	d8 2f       	mov	r29, r24
 63c:	c6 2f       	mov	r28, r22
 63e:	7a 01       	movw	r14, r20
 640:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
 642:	0e 94 ad 02 	call	0x55a	; 0x55a <lcd_cursor>
	
	if (val < 0)
 646:	ff 20       	and	r15, r15
 648:	5c f4       	brge	.+22     	; 0x660 <lcd_numeric_value+0x32>
	{
		val = 0 - val;
 64a:	f0 94       	com	r15
 64c:	e1 94       	neg	r14
 64e:	f1 08       	sbc	r15, r1
 650:	f3 94       	inc	r15
		lcd_string(row, column, "-");
 652:	8d 2f       	mov	r24, r29
 654:	6c 2f       	mov	r22, r28
 656:	45 e3       	ldi	r20, 0x35	; 53
 658:	52 e0       	ldi	r21, 0x02	; 2
 65a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lcd_string>
		column+=1;
 65e:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
 660:	dd 23       	and	r29, r29
 662:	11 f0       	breq	.+4      	; 0x668 <lcd_numeric_value+0x3a>
 664:	cc 23       	and	r28, r28
 666:	19 f4       	brne	.+6      	; 0x66e <lcd_numeric_value+0x40>
	{
		lcd_home();
 668:	0e 94 a9 02 	call	0x552	; 0x552 <lcd_home>
 66c:	04 c0       	rjmp	.+8      	; 0x676 <lcd_numeric_value+0x48>
	}
	
	else
	{
		lcd_cursor(row, column);
 66e:	8d 2f       	mov	r24, r29
 670:	6c 2f       	mov	r22, r28
 672:	0e 94 ad 02 	call	0x55a	; 0x55a <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
 676:	05 30       	cpi	r16, 0x05	; 5
 678:	11 05       	cpc	r17, r1
 67a:	91 f4       	brne	.+36     	; 0x6a0 <lcd_numeric_value+0x72>
	{
		million = val/10000+48;
 67c:	c7 01       	movw	r24, r14
 67e:	60 e1       	ldi	r22, 0x10	; 16
 680:	77 e2       	ldi	r23, 0x27	; 39
 682:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divmodhi4>
 686:	ab 01       	movw	r20, r22
 688:	40 5d       	subi	r20, 0xD0	; 208
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	50 93 39 02 	sts	0x0239, r21
 690:	40 93 38 02 	sts	0x0238, r20
		lcd_wr_char(row ,column, million);
 694:	8d 2f       	mov	r24, r29
 696:	6c 2f       	mov	r22, r28
 698:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_wr_char>
		column+=1;
 69c:	cf 5f       	subi	r28, 0xFF	; 255
 69e:	03 c0       	rjmp	.+6      	; 0x6a6 <lcd_numeric_value+0x78>
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
 6a0:	04 30       	cpi	r16, 0x04	; 4
 6a2:	11 05       	cpc	r17, r1
 6a4:	e1 f4       	brne	.+56     	; 0x6de <lcd_numeric_value+0xb0>
	{
		temp = val/1000;
 6a6:	c7 01       	movw	r24, r14
 6a8:	68 ee       	ldi	r22, 0xE8	; 232
 6aa:	73 e0       	ldi	r23, 0x03	; 3
 6ac:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divmodhi4>
 6b0:	cb 01       	movw	r24, r22
 6b2:	70 93 3b 02 	sts	0x023B, r23
 6b6:	60 93 3a 02 	sts	0x023A, r22
		thousand = temp%10 + 48;
 6ba:	6a e0       	ldi	r22, 0x0A	; 10
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodhi4>
 6c2:	ac 01       	movw	r20, r24
 6c4:	40 5d       	subi	r20, 0xD0	; 208
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	50 93 43 02 	sts	0x0243, r21
 6cc:	40 93 42 02 	sts	0x0242, r20
		lcd_wr_char(row, column, thousand);
 6d0:	8d 2f       	mov	r24, r29
 6d2:	6c 2f       	mov	r22, r28
 6d4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_wr_char>
		column+=1;
 6d8:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <lcd_numeric_value+0xb2>
		val = 0 - val;
		lcd_string(row, column, "-");
		column+=1;
	}
		
	unsigned char flag = 0;
 6de:	80 e0       	ldi	r24, 0x00	; 0
		lcd_wr_char(row, column, thousand);
		column+=1;
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
 6e0:	03 30       	cpi	r16, 0x03	; 3
 6e2:	11 05       	cpc	r17, r1
 6e4:	11 f0       	breq	.+4      	; 0x6ea <lcd_numeric_value+0xbc>
 6e6:	81 30       	cpi	r24, 0x01	; 1
 6e8:	d9 f4       	brne	.+54     	; 0x720 <lcd_numeric_value+0xf2>
	{
		temp = val/100;
 6ea:	c7 01       	movw	r24, r14
 6ec:	64 e6       	ldi	r22, 0x64	; 100
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divmodhi4>
 6f4:	cb 01       	movw	r24, r22
 6f6:	70 93 3b 02 	sts	0x023B, r23
 6fa:	60 93 3a 02 	sts	0x023A, r22
		hundred = temp%10 + 48;
 6fe:	6a e0       	ldi	r22, 0x0A	; 10
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodhi4>
 706:	ac 01       	movw	r20, r24
 708:	40 5d       	subi	r20, 0xD0	; 208
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	50 93 3f 02 	sts	0x023F, r21
 710:	40 93 3e 02 	sts	0x023E, r20
		lcd_wr_char(row, column, hundred);
 714:	8d 2f       	mov	r24, r29
 716:	6c 2f       	mov	r22, r28
 718:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_wr_char>
		column+=1;
 71c:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
 71e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if(digits == 2 || flag == 1)
 720:	02 30       	cpi	r16, 0x02	; 2
 722:	11 05       	cpc	r17, r1
 724:	11 f0       	breq	.+4      	; 0x72a <lcd_numeric_value+0xfc>
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	d9 f4       	brne	.+54     	; 0x760 <lcd_numeric_value+0x132>
	{
		temp = val/10;
 72a:	2a e0       	ldi	r18, 0x0A	; 10
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	c7 01       	movw	r24, r14
 730:	b9 01       	movw	r22, r18
 732:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divmodhi4>
 736:	cb 01       	movw	r24, r22
 738:	70 93 3b 02 	sts	0x023B, r23
 73c:	60 93 3a 02 	sts	0x023A, r22
		tens = temp%10 + 48;
 740:	b9 01       	movw	r22, r18
 742:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__udivmodhi4>
 746:	ac 01       	movw	r20, r24
 748:	40 5d       	subi	r20, 0xD0	; 208
 74a:	5f 4f       	sbci	r21, 0xFF	; 255
 74c:	50 93 3d 02 	sts	0x023D, r21
 750:	40 93 3c 02 	sts	0x023C, r20
		lcd_wr_char(row, column, tens);
 754:	8d 2f       	mov	r24, r29
 756:	6c 2f       	mov	r22, r28
 758:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_wr_char>
		column+=1;
 75c:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
 75e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if(digits == 1 || flag == 1)
 760:	01 30       	cpi	r16, 0x01	; 1
 762:	11 05       	cpc	r17, r1
 764:	11 f0       	breq	.+4      	; 0x76a <lcd_numeric_value+0x13c>
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	89 f4       	brne	.+34     	; 0x78c <lcd_numeric_value+0x15e>
	{
		unit = val%10 + 48;
 76a:	c7 01       	movw	r24, r14
 76c:	6a e0       	ldi	r22, 0x0A	; 10
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divmodhi4>
 774:	ac 01       	movw	r20, r24
 776:	40 5d       	subi	r20, 0xD0	; 208
 778:	5f 4f       	sbci	r21, 0xFF	; 255
 77a:	50 93 41 02 	sts	0x0241, r21
 77e:	40 93 40 02 	sts	0x0240, r20
		lcd_wr_char(row, column, unit);
 782:	8d 2f       	mov	r24, r29
 784:	6c 2f       	mov	r22, r28
 786:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_wr_char>
		column+=1;
 78a:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if(digits > 5)
 78c:	06 30       	cpi	r16, 0x06	; 6
 78e:	11 05       	cpc	r17, r1
 790:	2c f0       	brlt	.+10     	; 0x79c <lcd_numeric_value+0x16e>
	{
		lcd_wr_char(row, column, 'E');
 792:	8d 2f       	mov	r24, r29
 794:	6c 2f       	mov	r22, r28
 796:	45 e4       	ldi	r20, 0x45	; 69
 798:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_wr_char>
		column+=1;
	}
}
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	1f 91       	pop	r17
 7a2:	0f 91       	pop	r16
 7a4:	ff 90       	pop	r15
 7a6:	ef 90       	pop	r14
 7a8:	08 95       	ret

000007aa <__udivmodhi4>:
 7aa:	aa 1b       	sub	r26, r26
 7ac:	bb 1b       	sub	r27, r27
 7ae:	51 e1       	ldi	r21, 0x11	; 17
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <__udivmodhi4_ep>

000007b2 <__udivmodhi4_loop>:
 7b2:	aa 1f       	adc	r26, r26
 7b4:	bb 1f       	adc	r27, r27
 7b6:	a6 17       	cp	r26, r22
 7b8:	b7 07       	cpc	r27, r23
 7ba:	10 f0       	brcs	.+4      	; 0x7c0 <__udivmodhi4_ep>
 7bc:	a6 1b       	sub	r26, r22
 7be:	b7 0b       	sbc	r27, r23

000007c0 <__udivmodhi4_ep>:
 7c0:	88 1f       	adc	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	5a 95       	dec	r21
 7c6:	a9 f7       	brne	.-22     	; 0x7b2 <__udivmodhi4_loop>
 7c8:	80 95       	com	r24
 7ca:	90 95       	com	r25
 7cc:	bc 01       	movw	r22, r24
 7ce:	cd 01       	movw	r24, r26
 7d0:	08 95       	ret

000007d2 <__divmodhi4>:
 7d2:	97 fb       	bst	r25, 7
 7d4:	09 2e       	mov	r0, r25
 7d6:	07 26       	eor	r0, r23
 7d8:	0a d0       	rcall	.+20     	; 0x7ee <__divmodhi4_neg1>
 7da:	77 fd       	sbrc	r23, 7
 7dc:	04 d0       	rcall	.+8      	; 0x7e6 <__divmodhi4_neg2>
 7de:	e5 df       	rcall	.-54     	; 0x7aa <__udivmodhi4>
 7e0:	06 d0       	rcall	.+12     	; 0x7ee <__divmodhi4_neg1>
 7e2:	00 20       	and	r0, r0
 7e4:	1a f4       	brpl	.+6      	; 0x7ec <__divmodhi4_exit>

000007e6 <__divmodhi4_neg2>:
 7e6:	70 95       	com	r23
 7e8:	61 95       	neg	r22
 7ea:	7f 4f       	sbci	r23, 0xFF	; 255

000007ec <__divmodhi4_exit>:
 7ec:	08 95       	ret

000007ee <__divmodhi4_neg1>:
 7ee:	f6 f7       	brtc	.-4      	; 0x7ec <__divmodhi4_exit>
 7f0:	90 95       	com	r25
 7f2:	81 95       	neg	r24
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	08 95       	ret

000007f8 <_exit>:
 7f8:	f8 94       	cli

000007fa <__stop_program>:
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <__stop_program>
